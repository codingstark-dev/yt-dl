<<<<<<< HEAD
name: Build and Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: node:14

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Build and Publish to Github Packages Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        # env:
        #   NEXT_PUBLIC_BACKEND_URL: ${{ secrets.APP_NEXT_PUBLIC_BACKEND_URL }}
        #   NEXT_PUBLIC_META_API_KEY: ${{ secrets.APP_NEXT_PUBLIC_META_API_KEY }}
        with:
          name: my_github_username/my_repository_name/my_image_name
          registry: ghcr.io
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets. GITHUB_TOKEN }}
          dockerfile: Dockerfile
          buildargs: NEXT_PUBLIC_BACKEND_URL,NEXT_PUBLIC_META_API_KEY
          tags: latest

      - name: Deploy package to digitalocean
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: ${{ secrets.USERNAME }}
          GITHUB_TOKEN: ${{ secrets. GITHUB_TOKEN }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN
          script: |
            docker login ghcr.io -u $GITHUB_USERNAME -p $GITHUB_TOKEN
            docker pull ghcr.io/my_github_username/my_repository_name/my_image_name:latest
            docker stop containername
            docker system prune -f
            docker run --name containername -dit -p 3000:3000 ghcr.io/my_github_username/my_repository_name/my_image_name:latest
=======
name: buildon
push: 
    branches:  
      - mainjobs: 
build: 
runs-on: ubuntu-latest 
steps: 
       - uses: actions/checkout@v2 
       - name: yarn install 
         run: | 
           yarn 
test: 
     runs-on: ubuntu-latest 
     needs: build 
     strategy: 
        matrix: 
          os: [ubuntu-latest] 
          node-version: [14.x] 
        steps: 
          - uses: actions/checkout@v2 
          - name: Use Node.js ${{ matrix.node-version }} 
            uses: actions/setup-node@v1 
            with: 
                node-version: ${{ matrix.node-version }} 
          - name: yarn install & test 
            run: | 
              yarn 
              yarn test 
            env: 
              CI: truebuild-and-deploy
              runs-on: ubuntu-latest 
needs: test 
      steps:
        - uses: actions/checkout@v2 
        - name: Build image 
        run: docker build . --file Dockerfile --tag yt-dl --label "runnumber=${GITHUB_RUN_ID}"      - name: Log into registry 
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin      - name: Push image 
        run: | 
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/yt-dl 
          # Change all uppercase to lowercase 
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]') 
          # Strip git ref prefix from version 
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,') 
          # Strip "v" prefix from tag name 
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//') 
          # Use Docker `latest` tag convention 
          [ "$VERSION" == "main" ] && VERSION=latest 
          echo IMAGE_ID=$IMAGE_ID 
          echo VERSION=$VERSION 
          docker tag yt-dl $IMAGE_ID:$VERSION 
          docker push $IMAGE_ID:$VERSION- name: Deploy Container to Digitalocean 
        uses: appleboy/ssh-action@master 
        with: 
          host: ${{ secrets.HOST }} 
          username: ${{ secrets.USERNAME }} 
          password: ${{ secrets.PASSWORD }}

          script: | 
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin 
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/yt-dl 
            # Change all uppercase to lowercase 
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]') 
            # Strip git ref prefix from version 
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,') 
            # Strip "v" prefix from tag name 
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//') 
            # Use Docker `latest` tag convention 
            [ "$VERSION" == "main" ] && VERSION=latest 
            echo IMAGE_ID=$IMAGE_ID 
            echo VERSION=$VERSION 
            docker pull $IMAGE_ID:$VERSION 
            docker update --restart=no yt-dl || true 
            docker stop $(docker ps -a -q) || true 
            docker rm $(docker ps -a -q) || true 
            docker run -d --restart unless-stopped -p 3000:3000 --name yt-dl $IMAGE_ID:$VERSION
>>>>>>> bde5d2a001d5b194a9570d080c5340b6b15bc211
